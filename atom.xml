<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ward Bekker]]></title>
  <link href="http://wardbekker.github.io/atom.xml" rel="self"/>
  <link href="http://wardbekker.github.io/"/>
  <updated>2013-04-25T15:10:57+02:00</updated>
  <id>http://wardbekker.github.io/</id>
  <author>
    <name><![CDATA[Ward Bekker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Dutch] Scrum 2009 ≠ Scrum 2012]]></title>
    <link href="http://wardbekker.github.io/blog/2013/04/25/scrum-2009-not-scrum-2012/"/>
    <updated>2013-04-25T15:05:00+02:00</updated>
    <id>http://wardbekker.github.io/blog/2013/04/25/scrum-2009-not-scrum-2012</id>
    <content type="html"><![CDATA[<p>Tijdens de recent bezochte Scrum Product Owner cursus werd duidelijk dat Scrum is veranderd. Mijn begrip van Scrum, zoals geleerd tijdens de Scrum Master training van <a href="http://en.wikipedia.org/wiki/Jeff_Sutherland">Jeff Sutherland</a> in 2009, was aan herziening toe. Hieronder mijn bevindingen:</p>

<h2>Scrum in 2009</h2>

<p>Jeff Sutherland, één van de bedenkers van scrum, legde in de 2009 training de nadruk op de volgende concepten:</p>

<ul>
<li><em>Hyperproductive teams.</em> Dit zijn teams met een hoge mate van plichtsbesef, samenwerking en eigenaarschap (ownership), met een enorme productiviteit tot gevolg.</li>
<li><em>Velocity.</em> Velocity druk uit hoeveel functionaliteit, eventueel in abstracte story points, er ontwikkeld is per sprint. Naast feedback voor voor het team werd velocity gebracht als een belangrijke metriek voor performance en planning rapportage voor het management.</li>
<li><em>Definition of done.</em> Bij voorkeur gehanteerd als een Oost-Duitste grensovergang ten tijde van de DDR. Vanaf de eerste sprint dient de product increment production-ready opgeleverd te worden.</li>
</ul>


<h2>Scrum in 2012</h2>

<p>In de recente Scrum Product Owner cursus door <a href="http://www.romanpichler.com/">Roman Pichler</a>, bleek dat in de afgelopen drie jaar het belang en toepassing van deze concepten sterk zijn veranderd:</p>

<ul>
<li><em>Hyperproductivity</em> is niet één maal genoemd in de Product Owner cursus. Productiviteit is niet (meer?) het doel van Scrum. Het doel van Scrum is de effectieve realisatie van nieuwe, succesvolle en innovatieve producten met enthousiaste eindgebruikers.</li>
<li><em>Velocity als rapportagemiddel</em> wordt sterk afgeraden. Het is één van de hulpmiddel voor de product owner om de verwachte release planning bij te werken, maar niet meer. De echte waarde van product increments is het verifiëren van aannamens en het ontdekken van belangrijke functionaliteit. Negatieve feedback en sprint/story mislukkingen zijn net zo waardevol. Een sprint met zero velocity geeft derhalve zéér waardevolle feedback. Ik kan uit ervaring spreken dat het zeer verleidelijk is voor management om velocity te misbruiken als rapportagemetriek van de team prestaties.</li>
<li><em>Definition of Done (DoD).</em> Uiteraard moet er in de loop van de ontwikkeling production-ready software worden opgeleverd, maar in de eerste fase van het project is experimenteren veel belangrijker. Uitvinden wat werkt, en wat niet werkt. Hierdoor is de mate van verandering hoog. Een veeleisende DoD werkt dan als een verlammende bureaucratie. Pas wanneer de basis functionaliteit van het product stabiliseert, is het aan te raden om de DoD aan te scherpen.</li>
</ul>


<h2>Niet efficient</h2>

<p>In mijn optiek benadrukken de veranderingen de sweet spot van Scrum; ontwikkeling van nieuwe features of geheel nieuwe producten met een hoge mate van innovatie. Innovatie is een proces van vallen en opstaan. Ontdekken wat werkt, en vooral ook wat niet werkt. Dit leerproces is derhalve per definitie niet efficient. Scrum is wel een heel erg effectieve manier van innoveren. Veel ruimte voor waardevolle feedback en multidisciplinaire samenwerking waardoor het team snel leert. In <a href="http://www.romanpichler.com/blog/agile-product-innovation/choosing-the-right-lean-and-agile-innovation-practices/">deze blog post</a> gaat Roman Pichler dieper in op de toepasbaarheid van Scrum in de verschillende fases van product innovatie</p>

<h2>Waar is het changelog?</h2>

<p>Gezien de grote veranderingen was ik benieuwd of er een officiële Scrum changelog is. Zijn de veranderingen een verschil in interpretatie tussen de verschillende trainers, of zijn de spelregels veranderd. Helaas, er is geen changelog. Wel de Scrum Guide, de officiële gids met de actuele spelregels van Scrum. <a href="http://www.scrum.org/scrumguides/">De meest recente versie is uit october 2011</a>. Ik ga deze uitpluizen of er nog andere belangrijke veranderingen zijn. Wie weet materiaal voor een volgende blog post. Renee Troughton van het Agile Forest blog heeft reeds voorwerk gedaan in zijn serie artikelen <a href="http://agileforest.com/2012/02/19/scrum-evolution-over-time-part-1/">Scrum Evolution over Time</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable SPDY for your Erlang website]]></title>
    <link href="http://wardbekker.github.io/blog/2013/04/25/enable-spdy-for-your-erlang-website/"/>
    <updated>2013-04-25T15:01:00+02:00</updated>
    <id>http://wardbekker.github.io/blog/2013/04/25/enable-spdy-for-your-erlang-website</id>
    <content type="html"><![CDATA[<p>Google&#8217;s <a href="https://thestrangeloop.com">Strange Loop</a> presentation <a href="https://docs.google.com/presentation/d/1dPbm1lKjVqdYq3_z3Dgp4ChPNZuMyrL9uLWGL40HBhI/edit#slide=id.p19">Making the Web Faster</a> inspired me to enable SPDY on one of my side projects <a href="https://www.zininsushi.nl">Zin In Sushi</a>. This simple sushi restaurant review site is build in Erlang using <a href="http://wiki.basho.com/Webmachine.html">Basho&#8217;s Webmachine</a> in combination with <a href="http://code.google.com/p/erlydtl/">Erlydtl</a>.</p>

<p>Below is a quick writeup of the steps needed.</p>

<p><em>Assumptions:</em></p>

<ul>
<li>Your Erlang powered website is running on port 3000 (Substitute this with your own magic value) on HTTP.</li>
<li>You are running a recent version of Ubuntu (I&#8217;m running 12.04 LTS).</li>
<li>Your domain is <code>www.example.org</code>.</li>
</ul>


<p><em>The steps in summary</em>:</p>

<ul>
<li>Reverse proxy setup with Apache 2</li>
<li>SSL Setup with Apache 2</li>
<li>Installation of <code>mod_spdy</code></li>
<li><code>$ sudo service apache restart</code>, and you&#8217;re done!</li>
</ul>


<h2>Reverse proxy setup with Apache 2</h2>

<p>First install Apache 2 if not already present:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get install apache2
</span></code></pre></td></tr></table></div></figure>


<p>Enable the <code>proxy_http</code> Apache module to get reverse proxy support:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo a2enmod proxy_http
</span></code></pre></td></tr></table></div></figure>


<p>Add a new site to Apache&#8217;s <code>available-sites</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo vim /etc/apache2/sites-available/reverse_proxy
</span></code></pre></td></tr></table></div></figure>


<p>And past in the following contents (and replace the domain name and ports if needed):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nb">ServerName</span> www.example.org
</span><span class='line'>
</span><span class='line'>     <span class="nb">ProxyPreserveHost</span> <span class="k">On</span>
</span><span class='line'>     <span class="nb">ProxyRequests</span> <span class="k">Off</span>
</span><span class='line'>     <span class="nb">ProxyPass</span> / http://localhost:3000/
</span><span class='line'>     <span class="nb">ProxyPassReverse</span> / http://localhost:3000/
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enable the site by executing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo a2ensite reverse_proxy
</span></code></pre></td></tr></table></div></figure>


<p>Next up; SSL support!</p>

<h2>SSL Setup with Apache 2</h2>

<p>Enable the <code>ssl</code> Apache module to enable SSL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo a2enmod ssl
</span></code></pre></td></tr></table></div></figure>


<p>SSL certificates are not free, so in this article we generate a self signed SSL certificate to keep moving:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo mkdir /etc/apache2/ssl
</span><span class='line'><span class="nv">$ </span>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt
</span></code></pre></td></tr></table></div></figure>


<p><em>Important!</em> When generating the key, make sure the FQDN matches your domain name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter <span class="s1">&#39;.&#39;</span>, the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Country Name <span class="o">(</span>2 letter code<span class="o">)</span> <span class="o">[</span>AU<span class="o">]</span>:US
</span><span class='line'>State or Province Name <span class="o">(</span>full name<span class="o">)</span> <span class="o">[</span>Some-State<span class="o">]</span>:New York
</span><span class='line'>Locality Name <span class="o">(</span>eg, city<span class="o">)</span> <span class="o">[]</span>:NYC
</span><span class='line'>Organization Name <span class="o">(</span>eg, company<span class="o">)</span> <span class="o">[</span>Internet Widgits Pty Ltd<span class="o">]</span>:Awesome Inc
</span><span class='line'>Organizational Unit Name <span class="o">(</span>eg, section<span class="o">)</span> <span class="o">[]</span>:Dept of Merriment
</span><span class='line'>Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:example.org
</span><span class='line'>Email Address <span class="o">[]</span>:webmaster@example.org
</span></code></pre></td></tr></table></div></figure>


<p>After generating the required encryption keys, we re-edit the <code>reverse_proxy</code> site:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo vim /etc/apache2/sites-available/reverse_proxy
</span></code></pre></td></tr></table></div></figure>


<p>And append the following configuration code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:443</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nb">ServerName</span> www.example.org
</span><span class='line'>
</span><span class='line'>     <span class="nb">SSLEngine</span> <span class="k">on</span>
</span><span class='line'>     <span class="nb">SSLCertificateFile</span> <span class="sx">/etc/apache2/ssl/apache.crt</span>
</span><span class='line'>     <span class="nb">SSLCertificateKeyFile</span> <span class="sx">/etc/apache2/ssl/apache.key</span>
</span><span class='line'>
</span><span class='line'>     <span class="nb">SSLProxyEngine</span> <span class="k">on</span>
</span><span class='line'>     <span class="nb">ProxyPreserveHost</span> <span class="k">On</span>
</span><span class='line'>     <span class="nb">ProxyRequests</span> <span class="k">Off</span>
</span><span class='line'>     <span class="nb">ProxyPass</span> / http://localhost:3000/
</span><span class='line'>     <span class="nb">ProxyPassReverse</span> / http://localhost:3000/
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Important! We need to check if Apache is listening on port 443 (SSL) and virtualhost support is enabled for this. <code>/etc/apache2/ports.conf</code> should have the following lines enabled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;IfModule</span> <span class="s">mod_ssl.c</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">NameVirtualHost</span> *:443
</span><span class='line'>    <span class="nb">Listen</span> <span class="m">443</span>
</span><span class='line'><span class="nt">&lt;/IfModule&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&#8217;re in a good shape to add SPDY support</p>

<h2>Installation of <code>mod_spdy</code></h2>

<p>You need to fetch the latest <code>mod_spdy</code> package from Google:</p>

<ul>
<li><a href="https://dl-ssl.google.com/dl/linux/direct/mod-spdy-beta_current_i386.deb">mod_spdy 32-bit .deb (Debian/Ubuntu)</a></li>
<li><a href="https://dl-ssl.google.com/dl/linux/direct/mod-spdy-beta_current_amd64.deb">mod_spdy 64-bit .deb (Debian/Ubuntu)</a></li>
</ul>


<p>Check the architecture of your system by running <code>uname -m</code>.</p>

<p>Install the package by running the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo dpkg -i mod-spdy-*.deb
</span><span class='line'><span class="nv">$ </span>sudo apt-get -f install
</span><span class='line'><span class="nv">$ </span>sudo a2enmod spdy
</span></code></pre></td></tr></table></div></figure>


<h2>Le moment suprême</h2>

<p>Restart Apache to power up the new configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo service apache2 restart
</span></code></pre></td></tr></table></div></figure>


<p>And browse to your website <code>https://www.example.org</code> in <a href="https://www.google.com/intl/en/chrome/browser/">Google Chrome</a>.</p>

<p>To verify <code>mod_spdy</code> is working, open <code>chrome://net-internals/#spd</code> just after the first page load. Your server&#8217;s domain should be listed in the table under the <em>SPDY sessions</em> heading.gs</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Dutch] Geautomatiseerd testen met Erlang/OTP en Travis-CI - een introductie.]]></title>
    <link href="http://wardbekker.github.io/blog/2013/04/25/geautomatiseerd-testen-met-erlang/"/>
    <updated>2013-04-25T14:58:00+02:00</updated>
    <id>http://wardbekker.github.io/blog/2013/04/25/geautomatiseerd-testen-met-erlang</id>
    <content type="html"><![CDATA[<p><a href="http://www.erlang.org">Erlang/OTP</a> is ontworpen voor het bouwen van grote, schaalbare, soft-realtime systemen met een hoge beschikbaarheid. Het testen van dergelijke systemen is niet eenvoudig, laat staan <a href="http://en.wikipedia.org/wiki/Software_testing#Automated_testing">geautomatiseerd testen</a>. Voor Erlang zijn er dan ook geavanceerde automatische test methoden beschikbaar.</p>

<p>De drie belangrijkste methoden worden hier kort besproken aan de hand van een test project. De methoden zijn:</p>

<ul>
<li><a href="#unit-testing-met-eunit">Unit testing</a></li>
<li><a href="#quickcheck">Quickcheck</a></li>
<li><a href="#common-test">Common test</a></li>
</ul>


<p>Je <em>cloned</em> het project van Github met het volgende commando:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git@github.com:wardbekker/ci_quickstart.git
</span></code></pre></td></tr></table></div></figure>


<p>Voor het compileren van het project en uitvoeren van de testen gebruik je <a href="https://github.com/basho/rebar">Rebar</a>, een <em>sophisticated build-tool for Erlang projects that follows OTP principles</em>.  Je bouwt Rebar als volgt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git://github.com/basho/rebar.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>rebar
</span><span class='line'><span class="nv">$ </span>./bootstrap
</span><span class='line'>Recompile: src/getopt
</span><span class='line'>...
</span><span class='line'>Recompile: src/rebar_utils
</span><span class='line'><span class="o">==</span>&gt; rebar <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'>Congratulations! You now have a self-contained script called <span class="s2">&quot;rebar&quot;</span> in
</span><span class='line'>your current working directory. Place this script anywhere in your path
</span><span class='line'>and you can use rebar to build OTP-compliant apps.
</span></code></pre></td></tr></table></div></figure>


<h2>Unit testing met EUnit</h2>

<p>Je begint met de eenvoudigste test methode; <a href="http://www.erlang.org/doc/apps/eunit/chapter.html">EUnit</a>. Dit is een unit testing bibliotheek voor Erlang. In een unit test controleer je of de functie goed werkt bij bekende input en resultaat. In dit voorbeeld heb je de functie <code>addition</code> geimplementeerd in de module <code>ci_quickstart_math</code> en twee <em>assertions</em>. (Je voert deze test uit op de commandline met: <code>rebar get-deps compile eunit</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ci_quickstart_math</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">addition</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">ifdef</span><span class="p">(</span><span class="nv">TEST</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;eunit/include/eunit.hrl&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">endif</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">addition</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">X</span> <span class="o">+</span> <span class="nv">Y</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">ifdef</span><span class="p">(</span><span class="nv">TEST</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">simple_test</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="n">assertEqual</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">addition</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span>
</span><span class='line'>    <span class="o">?</span><span class="n">assertNotEqual</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">addition</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">endif</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Het slechte nieuws is dat de waarde van deze test zeer laag is. Weet je nu zeker dat optelling goed gaat in alle gevallen? Het enige wat de test nu aantoont is dat:</p>

<ul>
<li><code>addition(2,2) == 4</code></li>
<li><code>addition(1,1) /= 3</code></li>
</ul>


<p>Stel, je verandert de implementatie van de function <code>addition</code> in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'> <span class="n">addition</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="mi">4</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>De testen slagen in dit geval, maar dit betekend niet dat de implementatie van <code>addition</code> correct is.</p>

<p>Sterker nog; De argumenten zijn in dit geval <a href="http://www.erlang.org/doc/efficiency_guide/advanced.html">64-bit small integers</a>, en die hebben een bereik van -576460752303423489 t/m 576460752303423488. Met twee argumenten, betekend dit dat er enorm veel verschillende input mogelijk is. En in de unit test controleer je er maar 3!?!?  Ook al ben je een harde werker en test je wel 10! addities, in feite is de waarde van de unit test niet verbeterd en nog steeds erg laag.</p>

<p>Wat nu?</p>

<h2>QuickCheck</h2>

<p>Wat je eigenlijk wil is een test methode dat alle mogelijke input variaties genereerd en de bijbehorende output controleert. Deze methode heet <a href="http://en.wikipedia.org/wiki/QuickCheck">QuickCheck</a>. Voor Erlang zijn er een aantal QuickCheck frameworks beschikbaar:</p>

<ul>
<li><a href="http://www.quviq.com">Quvic QuickCheck</a></li>
<li><a href="https://github.com/manopapad/proper">ProPEr</a></li>
<li><a href="https://github.com/krestenkrab/triq">Triq</a></li>
</ul>


<p>Een Quickcheck test voor de <code>addition</code> functie:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">prop_sum</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">FORALL</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="n">int</span><span class="p">(),</span> <span class="n">int</span><span class="p">()},</span>
</span><span class='line'>        <span class="n">addition</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span><span class="nv">Y</span><span class="p">)</span> <span class="o">-</span> <span class="nv">Y</span> <span class="o">==</span> <span class="nv">X</span>
</span><span class='line'>    <span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voer de test uit door de Erlang Shell op te starten met <code>./shell.sh</code> en de volgende functie aanroep <code>proper:quickcheck(ci_quickstart_math:prop_sum()).</code></p>

<p>Specifieke nummers worden niet getest. Je gaat nu controleren of de functie voldoet aan de eigenschap dat als je Y weer er afhaalt, je X overhoud.</p>

<p><code>{int(), int()}</code> genereerd <em>tuples</em> met twee random integers. De <em>tuple</em> wordt gebonden aan <code>{X, Y}</code> door <em>pattern matching</em>.  Standaard worden er 100 combinaties getest, en dit aantal voer je op met de <code>numtests</code> optie: <code>proper:quickcheck(ci_quickstart_math:prop_sum(),[{numtests,10000}]).</code>.</p>

<p>De uitdaging bij het werken met QuickCheck is het bedenken van de eigenschappen van de functie. Dit is lastiger dan het maken van een unit test. Sterker nog, het schrijven van de functie is vaak nog eenvoudiger dan het redeneren over de eigenschappen. Het positieve effect van QuickCheck op de kwaliteit van je code, en de manier waarop je als developer over je code nadenkt maakt deze tool een zeer waardevol onderdeel van je test gereedschapskist.</p>

<!---
[[Naast testen van functie eigenschappen is Quickcheck erg goed in het testen van zgn .State Machine. Een goed voorbeeld hiervan is de controle van de beloofde eventual consistency van Basho's Riak, een populair distribueerd database systeem gemaakt in Erlang. Zie hiervoor de slides van xxxxx. ]]
-->


<h2>Common Test</h2>

<p>Zoals bekend is Erlang uitermate geschikt voor het bouwen van concurrent, distributed en fault tolerant systemen. Om te controleren of je systeem werkt zoals verwacht, is complex.</p>

<p>Hiervoor is <a href="http://www.erlang.org/doc/apps/common_test/basics_chapter.html">Common Test</a> in het leven geroepen. Dit krachtige test framework is uitermate geschikt voor de ontwikkeling van pittige <a href="http://en.wikipedia.org/wiki/System_testing">systeem tests</a>. De inherente complexiteit van concurrent, distributed en fault tolerant systemen maakt Common Test complex. Hoe je een serieuze OTP applicatie op de pijnbank legt met CT valt derhalve buiten de scope van deze blogpost. Hier onder wel een minimaal Comment Test waarin de EUnit testen worden nagebootst door gebruik van pattern matching.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">basic_SUITE</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;common_test/include/ct.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">all</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">test1</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">test2</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">all</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">test1</span><span class="p">,</span><span class="n">test2</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="nf">test1</span><span class="p">(_</span><span class="nv">Config</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="mi">3</span> <span class="o">=</span> <span class="nn">ci_quickstart_math</span><span class="p">:</span><span class="nf">addition</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">).</span> <span class="c">%% validated using pattern matching</span>
</span><span class='line'>
</span><span class='line'><span class="nf">test2</span><span class="p">(_</span><span class="nv">Config</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="mi">2</span> <span class="o">=</span> <span class="nn">ci_quickstart_math</span><span class="p">:</span><span class="nf">addition</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span>  <span class="c">%% validated using pattern matching</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Continuous integration met Travis-CI</h2>

<p>Stel, je hebt een flinke hoeveelheid Eunit, Common Test en Quickcheck testen geïmplementeerd. Het uitvoeren van alle geavanceerde testen duurt lang en belast je systeem fors. Om deze, en <a href="http://en.wikipedia.org/wiki/Continuous_integration#Advantages_and_disadvantages">nog meer goede redenen</a>, is <a href="http://en.wikipedia.org/wiki/Continuous_integration">Continuous integration</a> aan te raden.</p>

<p>Er zijn legio systemen waarmee het mogelijk is om continuous integration voor Erlang op te zetten. In dit voorbeeld gebruik je het hosted systeem <a href="http://travis-ci.org">Travis-CI</a>. Deze dienst ondersteunt Erlang, integreert met het populaire Github en zorgt voor een vliegende start. En het is gratis voor open source projecten.</p>

<h3>Voorbereiding</h3>

<p>Het build proces van Travis-CI configureer je via het <code>.travis.yml</code>-bestand in de <em>root</em> van je repository. Een voorbeeld:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">erlang // De repository bevat een Erlang project</span>
</span><span class='line'><span class="l-Scalar-Plain">notifications</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">you@example.org // Build success en failures stuurt Travis-CI naar dit adres.</span>
</span><span class='line'><span class="l-Scalar-Plain">otp_release</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">// Travis-CI test/bouwt je project voor meerdere Erlang/OTP versies.</span>
</span><span class='line'>  <span class="l-Scalar-Plain">- R15B01</span>
</span><span class='line'>  <span class="l-Scalar-Plain">- R15B</span>
</span><span class='line'>  <span class="l-Scalar-Plain">- R14B04</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Travis-CI Setup</h3>

<p>Deze video toont hoe je start met Travis-CI:</p>

<ul>
<li>Log in met je Github account.</li>
<li>Ga naar de Travis-CI <em>profile</em> pagina.</li>
<li>Schakel de gewenste Github <em>repository</em> in.</li>
</ul>


<p>That&#8217;s it!</p>

<p><a href="http://www.youtube.com/watch?v=YxJJu6mShiA&hd=1" target="_blank"><img src="https://raw.github.com/wardbekker/ci_quickstart/master/images/signing_and_switch.png" alt="Setup" /></a></p>

<h3>Travis-CI Success Run</h3>

<p>Deze video toont hoe Travis-CI een geslaagde <em>integration build</em>
rapporteerd:</p>

<p><a href="http://www.youtube.com/watch?v=rJWRY1Uf_qg&hd=1" target="_blank"><img src="https://raw.github.com/wardbekker/ci_quickstart/master/images/success.png" alt="Success" /></a></p>

<h3>Travis-CI Failure Run</h3>

<p>Deze video toont hoe Travis-CI een mislukte <em>integration build</em>
rapporteerd:</p>

<p><a href="http://www.youtube.com/watch?v=5u8Kpz3m8ho&hd=1" target="_blank"><img src="https://raw.github.com/wardbekker/ci_quickstart/master/images/fail.png" alt="Fail" /></a></p>

<p>Als je e-mail adres in <code>.travis.yml</code> staat, krijg je ook een e-mail notificatie dat de laatste <em>commit</em> de build gebroken heeft:</p>

<p><img src="https://raw.github.com/wardbekker/ci_quickstart/master/images/broken_email.png" width="400" height="200" alt="Broken build e-mail notification" /></p>

<p>Als de fout verholpen is, krijg je de volgende e-mail als de build weer slaagt:</p>

<p><img src="https://raw.github.com/wardbekker/ci_quickstart/master/images/fixed_email.png " width="400" height="200" alt="Fixed build e-mail notification" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video: Automated testing with Erlang]]></title>
    <link href="http://wardbekker.github.io/blog/2013/04/25/erlang-testing/"/>
    <updated>2013-04-25T14:52:00+02:00</updated>
    <id>http://wardbekker.github.io/blog/2013/04/25/erlang-testing</id>
    <content type="html"><![CDATA[<p>In 2012 I presented
<a href="http://www.erlang-factory.com/conference/London2012/speakers/WardBekker">Automated testing with Erlang</a>
at the <a href="http://www.erlang-factory.com/">Erlang Factory</a> event on the London Google Campus. <a href="http://www.erlang-factory.com/upload/presentations/693/EFL_2012_LONDON_ward_bekker_slides.pdf">Slides here</a>,
watch the video below. Enjoy!</p>

<iframe src="http://player.vimeo.com/video/54543391" width="500"
height="375" frameborder="0" webkitAllowFullScreen mozallowfullscreen
allowFullScreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Fprof output confusing? Try KCachegrind.]]></title>
    <link href="http://wardbekker.github.io/blog/2013/04/24/fprof-kcachegrind/"/>
    <updated>2013-04-24T16:13:00+02:00</updated>
    <id>http://wardbekker.github.io/blog/2013/04/24/fprof-kcachegrind</id>
    <content type="html"><![CDATA[<p>Your Erlang code is perfect, but to find out why other peoples
code runs dog slow you probably profile the code with <a href="http://www.erlang.org/doc/man/fprof.html">fprof</a> like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(node@host)1> fprof:apply(module, function, [arguments]).
</span><span class='line'>(node@host)1> fprof:profile().
</span><span class='line'>(node@host)1> fprof:analyse({dest, "outfile.fprof"}).</span></code></pre></td></tr></table></div></figure>


<p>The printout of fprof analyse is a text dump of the result, which can
grow over 1000 lines and contains a lot of noise which makes it hard
to locate the bottlenecks. Below a truncated
sample of an actual fprof trace.</p>

<div><script src='https://gist.github.com/5458222.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<h2>KCachegrind</h2>

<p><a href="http://kcachegrind.sourceforge.net">KCachegrind</a> to the rescue! With this tool you can visually inspect the fprof
analyse result with sorting, a fancy call graph view, callee map and
more.</p>

<p><img src="http://wardbekker.github.io/images/qcachegrind.png" width="750" height="750" title="Qcachegrind screenshot" alt="images"></p>

<p>As KCachegrind can&#8217;t read fprof analysis output directly, you need to
convert it first to the callgrind format with the <a href="https://github.com/isacssouza/erlgrind">Erlgrind</a> script by <a href="https://twitter.com/isacssouza">Isac Sacchi e Souza</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./erlgrind_script outfile.fprof callgrind.001</span></code></pre></td></tr></table></div></figure>


<h2>KCachegrind &amp; Erlgrind Installation</h2>

<p>For installation of KCachegrind on my Mac I use
<a href="http://mxcl.github.io/homebrew/">Homebrew</a>, a package manager for OSX. Notice that you
install <em>qcachegrind</em>, the <a href="http://qt-project.org">QT</a> version of
KCachegrind.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install qcachegrind
</span><span class='line'>$ brew instal graphviz
</span><span class='line'>$ sudo ln -s /usr/local/bin/dot /usr/bin/dot</span></code></pre></td></tr></table></div></figure>


<p>Installing the Erlgrind (<a href="https://github.com/isacssouza/erlgrind">Github</a>) script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -O "https://raw.github.com/isacssouza/erlgrind/master/src/erlgrind"
</span><span class='line'>$ chmod +x erlgrind
</span><span class='line'>$ mv erlgrind /usr/local/bin/</span></code></pre></td></tr></table></div></figure>


<p>And open qcachegrind:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ open ~/Applications/qcachegrind.app</span></code></pre></td></tr></table></div></figure>


<p>Enjoy!</p>
]]></content>
  </entry>
  
</feed>
